// app/api/create-liquidity-pool/route.ts
import { NextResponse } from "next/server";
import { buildCreatePairTx, buildAddLiquidityTx } from "@/lib/services/meteoraService";

type CreateBody = {
  action: "create" | "add";
  userWalletAddress: string;
  // create
  baseTokenMint?: string;
  baseTokenDecimals?: number | string;
  initialBaseTokenAmount?: number | string;
  initialSolAmount?: number | string;
  feeBps?: number | string;
  // add
  pairAddress?: string;
  addBaseAmount?: number | string;
  addSolAmount?: number | string;
};

function parseNumber(value: number | string | undefined, fieldName: string) {
  if (value === undefined || value === null || value === "") return undefined;
  if (typeof value === "number") return value;
  const n = Number(value);
  if (Number.isNaN(n)) throw new Error(`Campo inv√°lido '${fieldName}': valor n√£o √© um n√∫mero.`);
  return n;
}

export async function POST(request: Request) {
  console.log("üü¶ [API] /api/create-liquidity-pool chamada");

  try {
    const body = (await request.json()) as CreateBody;
    console.log("üì• Corpo recebido:", body);

    const {
      action,
      userWalletAddress,
      baseTokenMint,
      baseTokenDecimals,
      initialBaseTokenAmount,
      initialSolAmount,
      feeBps,
      pairAddress,
      addBaseAmount,
      addSolAmount,
    } = body;

    if (!userWalletAddress) {
      return NextResponse.json({ error: "Endere√ßo da carteira √© obrigat√≥rio." }, { status: 400 });
    }

    if (action === "create") {
      // converter e validar entradas
      if (!baseTokenMint) {
        return NextResponse.json({ error: "baseTokenMint √© obrigat√≥rio para cria√ß√£o." }, { status: 400 });
      }

      const decimals = parseNumber(baseTokenDecimals, "baseTokenDecimals");
      const baseAmt = parseNumber(initialBaseTokenAmount, "initialBaseTokenAmount");
      const solAmt = parseNumber(initialSolAmount, "initialSolAmount");
      const fee = parseNumber(feeBps, "feeBps") ?? 25; // default 25 bps se n√£o informado

      if (decimals === undefined) {
        return NextResponse.json({ error: "baseTokenDecimals √© obrigat√≥rio para cria√ß√£o." }, { status: 400 });
      }
      if (baseAmt === undefined || baseAmt <= 0) {
        return NextResponse.json({ error: "initialBaseTokenAmount obrigat√≥rio e > 0." }, { status: 400 });
      }
      if (solAmt === undefined || solAmt <= 0) {
        return NextResponse.json({ error: "initialSolAmount obrigat√≥rio e > 0." }, { status: 400 });
      }

      console.log("üîé Construindo transa√ß√£o de cria√ß√£o de pool...");
      const result = await buildCreatePairTx({
        baseTokenMint,
        baseTokenDecimals: decimals,
        initialBaseTokenAmount: baseAmt,
        initialSolAmount: solAmt,
        userWalletAddress,
        feeBps: fee,
      });

      console.log("‚úÖ Transa√ß√£o de cria√ß√£o constru√≠da com sucesso.");
      return NextResponse.json({
        message: "Transa√ß√£o de cria√ß√£o de pool gerada com sucesso.",
        data: result,
      });
    }

    if (action === "add") {
      if (!pairAddress) {
        return NextResponse.json({ error: "pairAddress √© obrigat√≥rio para adicionar liquidez." }, { status: 400 });
      }

      const decimals = parseNumber(baseTokenDecimals, "baseTokenDecimals");
      const baseAmt = parseNumber(addBaseAmount, "addBaseAmount");
      const solAmt = parseNumber(addSolAmount, "addSolAmount");

      if (decimals === undefined) {
        return NextResponse.json({ error: "baseTokenDecimals √© obrigat√≥rio para adicionar liquidez." }, { status: 400 });
      }
      if (baseAmt === undefined || baseAmt <= 0) {
        return NextResponse.json({ error: "addBaseAmount obrigat√≥rio e > 0." }, { status: 400 });
      }
      if (solAmt === undefined || solAmt <= 0) {
        return NextResponse.json({ error: "addSolAmount obrigat√≥rio e > 0." }, { status: 400 });
      }

      console.log("üîé Construindo transa√ß√£o de adi√ß√£o de liquidez...");
      const result = await buildAddLiquidityTx({
        pairAddress,
        baseTokenDecimals: decimals,
        addBaseAmount: baseAmt,
        addSolAmount: solAmt,
        userWalletAddress,
      });

      console.log("‚úÖ Transa√ß√£o de adi√ß√£o de liquidez constru√≠da com sucesso.");
      return NextResponse.json({
        message: "Transa√ß√£o de adi√ß√£o de liquidez gerada com sucesso.",
        data: result,
      });
    }

    // a√ß√£o inv√°lida
    return NextResponse.json({ error: "A√ß√£o inv√°lida. Use 'create' ou 'add'." }, { status: 400 });
  } catch (err: any) {
    console.error("‚ùå ERRO DETALHADO NA API create-liquidity-pool:", err);
    // Se o erro for uma mensagem conhecida, retornamos 400
    if (err?.message?.includes("inv√°lido") || err?.message?.includes("Obrigat√≥rio") || err?.message?.includes("invalid")) {
      return NextResponse.json({ error: err.message }, { status: 400 });
    }
    return NextResponse.json({ error: err?.message ?? "Erro interno desconhecido." }, { status: 500 });
  }
}
